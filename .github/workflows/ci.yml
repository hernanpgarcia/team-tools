name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install bandit flake8
    
    - name: Lint with flake8
      run: |
        flake8 app.py calculations/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py calculations/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Security check with bandit
      run: |
        bandit -r app.py calculations/ -f json -o security_report.json
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short --junitxml=unit_test_results.xml
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short --junitxml=integration_test_results.xml
    
    - name: Run template tests
      run: |
        python -m pytest tests/templates/ -v --tb=short --junitxml=template_test_results.xml
    
    - name: Run performance tests
      run: |
        python -m pytest tests/test_performance.py -v -m performance --tb=short
    
    - name: Run regression tests
      run: |
        python -m pytest tests/test_performance.py -v -m regression --tb=short
    
    - name: Generate coverage report
      run: |
        python -m pytest tests/ --cov=calculations --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          *_test_results.xml
          htmlcov/
          security_report.json
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  smoke-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask
    
    - name: Smoke test - App starts
      run: |
        timeout 10s python app.py || code=$?
        if [ $code -eq 124 ]; then
          echo "App started successfully (timed out as expected)"
        else
          echo "App failed to start"
          exit 1
        fi
    
    - name: Smoke test - Import calculations
      run: |
        python -c "from calculations import fixed_horizon, msprt, std_calculator; print('All calculators import successfully')"
    
    - name: Smoke test - Basic calculations
      run: |
        python -c "
        from calculations.fixed_horizon import calculate_sample_size
        result = calculate_sample_size(100, 20, 'relative', 5, 0.8, 0.05)
        assert result['sample_size_per_group'] > 0
        print('Basic calculation test passed')
        "

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r app.py calculations/ -f json -o bandit_report.json
      continue-on-error: true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety_report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit_report.json
          safety_report.json

  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate documentation
      run: |
        # Check that required documentation exists
        test -f README.md || echo "README.md missing"
        test -f DEBUG_GUIDE.md || echo "DEBUG_GUIDE.md missing"
        test -f FIXES_SUMMARY.md || echo "FIXES_SUMMARY.md missing"
        
        # Check for broken links in markdown files
        echo "Documentation validation completed"
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          README.md
          DEBUG_GUIDE.md
          FIXES_SUMMARY.md

  notify:
    runs-on: ubuntu-latest
    needs: [test, smoke-test, security-scan, build-docs]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.smoke-test.result == 'success' }}
      run: |
        echo "✅ All tests passed! Calculator application is ready."
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.smoke-test.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1